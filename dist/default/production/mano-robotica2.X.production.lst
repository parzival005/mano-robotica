

Microchip MPLAB XC8 Assembler V2.36 build 20220127204148 
                                                                                               Tue May 24 00:06:37 2022

Microchip MPLAB XC8 C Compiler v2.36 (Free license) build 20220127204148 Og1 
     1                           	processor	16F877A
     2                           	pagewidth 120
     3                           	opt	flic
     4                           	psect	cinit,global,class=CODE,merge=1,delta=2
     5                           	psect	bssCOMMON,global,class=COMMON,space=1,delta=1,noexec
     6                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1,noexec
     7                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1,noexec
     8                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1,noexec
     9                           	psect	maintext,global,class=CODE,split=1,delta=2
    10                           	psect	text1,local,class=CODE,merge=1,delta=2
    11                           	psect	text2,local,class=CODE,merge=1,delta=2
    12                           	psect	text3,local,class=CODE,merge=1,delta=2,group=1
    13                           	psect	text4,local,class=CODE,merge=1,delta=2,group=1
    14                           	psect	text5,local,class=CODE,merge=1,delta=2
    15                           	psect	intentry,global,class=CODE,delta=2
    16                           	psect	idloc,global,abs,ovrld,class=IDLOC,space=5,delta=2,noexec
    17                           	psect	config,global,abs,ovrld,class=CONFIG,space=4,delta=2,noexec
    18                           	dabs	1,0x7E,2
    19  0000                     
    20                           ; Version 2.40
    21                           ; Generated 17/11/2021 GMT
    22                           ; 
    23                           ; Copyright Â© 2021, Microchip Technology Inc. and its subsidiaries ("Microchip")
    24                           ; All rights reserved.
    25                           ; 
    26                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    27                           ; 
    28                           ; Redistribution and use in source and binary forms, with or without modification, are
    29                           ; permitted provided that the following conditions are met:
    30                           ; 
    31                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    32                           ;        conditions and the following disclaimer.
    33                           ; 
    34                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    35                           ;        of conditions and the following disclaimer in the documentation and/or other
    36                           ;        materials provided with the distribution. Publication is not required when
    37                           ;        this file is used in an embedded application.
    38                           ; 
    39                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    40                           ;        software without specific prior written permission.
    41                           ; 
    42                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    43                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    44                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    45                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    46                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    47                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    48                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    49                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    50                           ; 
    51                           ; 
    52                           ; Code-generator required, PIC16F877A Definitions
    53                           ; 
    54                           ; SFR Addresses
    55  0000                     	;# 
    56  0001                     	;# 
    57  0002                     	;# 
    58  0003                     	;# 
    59  0004                     	;# 
    60  0005                     	;# 
    61  0006                     	;# 
    62  0007                     	;# 
    63  0008                     	;# 
    64  0009                     	;# 
    65  000A                     	;# 
    66  000B                     	;# 
    67  000C                     	;# 
    68  000D                     	;# 
    69  000E                     	;# 
    70  000E                     	;# 
    71  000F                     	;# 
    72  0010                     	;# 
    73  0011                     	;# 
    74  0012                     	;# 
    75  0013                     	;# 
    76  0014                     	;# 
    77  0015                     	;# 
    78  0015                     	;# 
    79  0016                     	;# 
    80  0017                     	;# 
    81  0018                     	;# 
    82  0019                     	;# 
    83  001A                     	;# 
    84  001B                     	;# 
    85  001B                     	;# 
    86  001C                     	;# 
    87  001D                     	;# 
    88  001E                     	;# 
    89  001F                     	;# 
    90  0081                     	;# 
    91  0085                     	;# 
    92  0086                     	;# 
    93  0087                     	;# 
    94  0088                     	;# 
    95  0089                     	;# 
    96  008C                     	;# 
    97  008D                     	;# 
    98  008E                     	;# 
    99  0091                     	;# 
   100  0092                     	;# 
   101  0093                     	;# 
   102  0094                     	;# 
   103  0098                     	;# 
   104  0099                     	;# 
   105  009C                     	;# 
   106  009D                     	;# 
   107  009E                     	;# 
   108  009F                     	;# 
   109  010C                     	;# 
   110  010D                     	;# 
   111  010E                     	;# 
   112  010F                     	;# 
   113  018C                     	;# 
   114  018D                     	;# 
   115  0000                     	;# 
   116  0001                     	;# 
   117  0002                     	;# 
   118  0003                     	;# 
   119  0004                     	;# 
   120  0005                     	;# 
   121  0006                     	;# 
   122  0007                     	;# 
   123  0008                     	;# 
   124  0009                     	;# 
   125  000A                     	;# 
   126  000B                     	;# 
   127  000C                     	;# 
   128  000D                     	;# 
   129  000E                     	;# 
   130  000E                     	;# 
   131  000F                     	;# 
   132  0010                     	;# 
   133  0011                     	;# 
   134  0012                     	;# 
   135  0013                     	;# 
   136  0014                     	;# 
   137  0015                     	;# 
   138  0015                     	;# 
   139  0016                     	;# 
   140  0017                     	;# 
   141  0018                     	;# 
   142  0019                     	;# 
   143  001A                     	;# 
   144  001B                     	;# 
   145  001B                     	;# 
   146  001C                     	;# 
   147  001D                     	;# 
   148  001E                     	;# 
   149  001F                     	;# 
   150  0081                     	;# 
   151  0085                     	;# 
   152  0086                     	;# 
   153  0087                     	;# 
   154  0088                     	;# 
   155  0089                     	;# 
   156  008C                     	;# 
   157  008D                     	;# 
   158  008E                     	;# 
   159  0091                     	;# 
   160  0092                     	;# 
   161  0093                     	;# 
   162  0094                     	;# 
   163  0098                     	;# 
   164  0099                     	;# 
   165  009C                     	;# 
   166  009D                     	;# 
   167  009E                     	;# 
   168  009F                     	;# 
   169  010C                     	;# 
   170  010D                     	;# 
   171  010E                     	;# 
   172  010F                     	;# 
   173  018C                     	;# 
   174  018D                     	;# 
   175  0000                     	;# 
   176  0001                     	;# 
   177  0002                     	;# 
   178  0003                     	;# 
   179  0004                     	;# 
   180  0005                     	;# 
   181  0006                     	;# 
   182  0007                     	;# 
   183  0008                     	;# 
   184  0009                     	;# 
   185  000A                     	;# 
   186  000B                     	;# 
   187  000C                     	;# 
   188  000D                     	;# 
   189  000E                     	;# 
   190  000E                     	;# 
   191  000F                     	;# 
   192  0010                     	;# 
   193  0011                     	;# 
   194  0012                     	;# 
   195  0013                     	;# 
   196  0014                     	;# 
   197  0015                     	;# 
   198  0015                     	;# 
   199  0016                     	;# 
   200  0017                     	;# 
   201  0018                     	;# 
   202  0019                     	;# 
   203  001A                     	;# 
   204  001B                     	;# 
   205  001B                     	;# 
   206  001C                     	;# 
   207  001D                     	;# 
   208  001E                     	;# 
   209  001F                     	;# 
   210  0081                     	;# 
   211  0085                     	;# 
   212  0086                     	;# 
   213  0087                     	;# 
   214  0088                     	;# 
   215  0089                     	;# 
   216  008C                     	;# 
   217  008D                     	;# 
   218  008E                     	;# 
   219  0091                     	;# 
   220  0092                     	;# 
   221  0093                     	;# 
   222  0094                     	;# 
   223  0098                     	;# 
   224  0099                     	;# 
   225  009C                     	;# 
   226  009D                     	;# 
   227  009E                     	;# 
   228  009F                     	;# 
   229  010C                     	;# 
   230  010D                     	;# 
   231  010E                     	;# 
   232  010F                     	;# 
   233  018C                     	;# 
   234  018D                     	;# 
   235  0001                     _TMR0	set	1
   236  0010                     _T1CONbits	set	16
   237  0010                     _T1CON	set	16
   238  000B                     _INTCONbits	set	11
   239  0008                     _PORTDbits	set	8
   240  009F                     _ADCON1bits	set	159
   241                           
   242                           	psect	cinit
   243  000F                     start_initialization:	
   244                           ; #config settings
   245                           
   246  000F                     __initialization:
   247                           
   248                           ; Clear objects allocated to COMMON
   249  000F  01F8               	clrf	__pbssCOMMON& (0+127)
   250  0010  01F9               	clrf	(__pbssCOMMON+1)& (0+127)
   251                           
   252                           ; Clear objects allocated to BANK0
   253  0011  1283               	bcf	3,5	;RP0=0, select bank0
   254  0012  1303               	bcf	3,6	;RP1=0, select bank0
   255  0013  01B2               	clrf	__pbssBANK0& (0+127)
   256  0014  01B3               	clrf	(__pbssBANK0+1)& (0+127)
   257  0015  01B4               	clrf	(__pbssBANK0+2)& (0+127)
   258  0016  01B5               	clrf	(__pbssBANK0+3)& (0+127)
   259  0017  01B6               	clrf	(__pbssBANK0+4)& (0+127)
   260  0018  01B7               	clrf	(__pbssBANK0+5)& (0+127)
   261  0019  01B8               	clrf	(__pbssBANK0+6)& (0+127)
   262  001A  01B9               	clrf	(__pbssBANK0+7)& (0+127)
   263  001B                     end_of_initialization:	
   264                           ;End of C runtime variable initialization code
   265                           
   266  001B                     __end_of__initialization:
   267  001B  0183               	clrf	3
   268  001C  120A  118A  2888   	ljmp	_main	;jump to C main() function
   269                           
   270                           	psect	bssCOMMON
   271  0078                     __pbssCOMMON:
   272  0078                     _cont_sr:
   273  0078                     	ds	2
   274                           
   275                           	psect	bssBANK0
   276  0032                     __pbssBANK0:
   277  0032                     _data_s:
   278  0032                     	ds	8
   279                           
   280                           	psect	cstackCOMMON
   281  0070                     __pcstackCOMMON:
   282  0070                     ?_Servo_Init:
   283  0070                     ?_Servo_2_Write:	
   284                           ; 1 bytes @ 0x0
   285                           
   286  0070                     ?_TMR0_ISR:	
   287                           ; 1 bytes @ 0x0
   288                           
   289  0070                     ??_TMR0_ISR:	
   290                           ; 1 bytes @ 0x0
   291                           
   292  0070                     ?_main:	
   293                           ; 1 bytes @ 0x0
   294                           
   295                           
   296                           ; 1 bytes @ 0x0
   297  0070                     	ds	4
   298  0074                     ??_Servo_Init:
   299  0074                     ?___wmul:	
   300                           ; 1 bytes @ 0x4
   301                           
   302  0074                     ___wmul@multiplier:	
   303                           ; 2 bytes @ 0x4
   304                           
   305                           
   306                           ; 2 bytes @ 0x4
   307  0074                     	ds	2
   308  0076                     ___wmul@multiplicand:
   309                           
   310                           ; 2 bytes @ 0x6
   311  0076                     	ds	2
   312  0078                     ??___wmul:
   313                           
   314                           	psect	cstackBANK0
   315  0020                     __pcstackBANK0:	
   316                           ; 1 bytes @ 0x8
   317                           
   318  0020                     ___wmul@product:
   319                           
   320                           ; 2 bytes @ 0x0
   321  0020                     	ds	2
   322  0022                     ?___awdiv:
   323  0022                     ___awdiv@divisor:	
   324                           ; 2 bytes @ 0x2
   325                           
   326                           
   327                           ; 2 bytes @ 0x2
   328  0022                     	ds	2
   329  0024                     ___awdiv@dividend:
   330                           
   331                           ; 2 bytes @ 0x4
   332  0024                     	ds	2
   333  0026                     ??___awdiv:
   334                           
   335                           ; 1 bytes @ 0x6
   336  0026                     	ds	1
   337  0027                     ___awdiv@counter:
   338                           
   339                           ; 1 bytes @ 0x7
   340  0027                     	ds	1
   341  0028                     ___awdiv@sign:
   342                           
   343                           ; 1 bytes @ 0x8
   344  0028                     	ds	1
   345  0029                     ___awdiv@quotient:
   346                           
   347                           ; 2 bytes @ 0x9
   348  0029                     	ds	2
   349  002B                     ??_Servo_2_Write:
   350                           
   351                           ; 1 bytes @ 0xB
   352  002B                     	ds	3
   353  002E                     Servo_2_Write@ang:
   354                           
   355                           ; 1 bytes @ 0xE
   356  002E                     	ds	1
   357  002F                     ??_main:
   358                           
   359                           ; 1 bytes @ 0xF
   360  002F                     	ds	3
   361                           
   362                           	psect	maintext
   363  0088                     __pmaintext:	
   364 ;;
   365 ;;Main: autosize = 0, tempsize = 3, incstack = 0, save=0
   366 ;;
   367 ;; *************** function _main *****************
   368 ;; Defined at:
   369 ;;		line 11 in file "main.c"
   370 ;; Parameters:    Size  Location     Type
   371 ;;		None
   372 ;; Auto vars:     Size  Location     Type
   373 ;;		None
   374 ;; Return value:  Size  Location     Type
   375 ;;                  1    wreg      void 
   376 ;; Registers used:
   377 ;;		wreg, status,2, status,0, pclath, cstack
   378 ;; Tracked objects:
   379 ;;		On entry : B00/0
   380 ;;		On exit  : 0/0
   381 ;;		Unchanged: 0/0
   382 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   383 ;;      Params:         0       0       0       0       0
   384 ;;      Locals:         0       0       0       0       0
   385 ;;      Temps:          0       3       0       0       0
   386 ;;      Totals:         0       3       0       0       0
   387 ;;Total ram usage:        3 bytes
   388 ;; Hardware stack levels required when called: 3
   389 ;; This function calls:
   390 ;;		_Servo_2_Write
   391 ;;		_Servo_Init
   392 ;; This function is called by:
   393 ;;		Startup code after reset
   394 ;; This function uses a non-reentrant model
   395 ;;
   396                           
   397  0088                     _main:	
   398                           ;psect for function _main
   399                           
   400  0088                     l843:	
   401                           ;incstack = 0
   402                           ; Regs used in _main: [wreg+status,2+status,0+pclath+cstack]
   403                           
   404                           
   405                           ;main.c: 13:     ADCON1bits.PCFG = 0x0F;
   406  0088  300F               	movlw	15
   407  0089  1683               	bsf	3,5	;RP0=1, select bank1
   408  008A  1303               	bcf	3,6	;RP1=0, select bank1
   409  008B  049F               	iorwf	31,f	;volatile
   410  008C                     l845:
   411                           
   412                           ;main.c: 14:     Servo_Init();
   413  008C  120A  118A  2159  120A  118A  	fcall	_Servo_Init
   414  0091                     l847:
   415                           
   416                           ;main.c: 17:     {;main.c: 18:         Servo_2_Write(0);
   417  0091  3000               	movlw	0
   418  0092  120A  118A  212F  120A  118A  	fcall	_Servo_2_Write
   419  0097                     l849:
   420                           
   421                           ;main.c: 19:         _delay((unsigned long)((1000)*(4000000/4000.0)));
   422  0097  3006               	movlw	6
   423  0098  1283               	bcf	3,5	;RP0=0, select bank0
   424  0099  1303               	bcf	3,6	;RP1=0, select bank0
   425  009A  00B1               	movwf	??_main+2
   426  009B  3013               	movlw	19
   427  009C  00B0               	movwf	??_main+1
   428  009D  30AD               	movlw	173
   429  009E  00AF               	movwf	??_main
   430  009F                     u397:
   431  009F  0BAF               	decfsz	??_main,f
   432  00A0  289F               	goto	u397
   433  00A1  0BB0               	decfsz	??_main+1,f
   434  00A2  289F               	goto	u397
   435  00A3  0BB1               	decfsz	??_main+2,f
   436  00A4  289F               	goto	u397
   437  00A5                     l851:
   438                           
   439                           ;main.c: 21:         Servo_2_Write(90);
   440  00A5  305A               	movlw	90
   441  00A6  120A  118A  212F  120A  118A  	fcall	_Servo_2_Write
   442  00AB                     l853:
   443                           
   444                           ;main.c: 22:         _delay((unsigned long)((1000)*(4000000/4000.0)));
   445  00AB  3006               	movlw	6
   446  00AC  1283               	bcf	3,5	;RP0=0, select bank0
   447  00AD  1303               	bcf	3,6	;RP1=0, select bank0
   448  00AE  00B1               	movwf	??_main+2
   449  00AF  3013               	movlw	19
   450  00B0  00B0               	movwf	??_main+1
   451  00B1  30AD               	movlw	173
   452  00B2  00AF               	movwf	??_main
   453  00B3                     u407:
   454  00B3  0BAF               	decfsz	??_main,f
   455  00B4  28B3               	goto	u407
   456  00B5  0BB0               	decfsz	??_main+1,f
   457  00B6  28B3               	goto	u407
   458  00B7  0BB1               	decfsz	??_main+2,f
   459  00B8  28B3               	goto	u407
   460  00B9                     l855:
   461                           
   462                           ;main.c: 24:         Servo_2_Write(180);
   463  00B9  30B4               	movlw	180
   464  00BA  120A  118A  212F  120A  118A  	fcall	_Servo_2_Write
   465  00BF                     l857:
   466                           
   467                           ;main.c: 25:         _delay((unsigned long)((1000)*(4000000/4000.0)));
   468  00BF  3006               	movlw	6
   469  00C0  1283               	bcf	3,5	;RP0=0, select bank0
   470  00C1  1303               	bcf	3,6	;RP1=0, select bank0
   471  00C2  00B1               	movwf	??_main+2
   472  00C3  3013               	movlw	19
   473  00C4  00B0               	movwf	??_main+1
   474  00C5  30AD               	movlw	173
   475  00C6  00AF               	movwf	??_main
   476  00C7                     u417:
   477  00C7  0BAF               	decfsz	??_main,f
   478  00C8  28C7               	goto	u417
   479  00C9  0BB0               	decfsz	??_main+1,f
   480  00CA  28C7               	goto	u417
   481  00CB  0BB1               	decfsz	??_main+2,f
   482  00CC  28C7               	goto	u417
   483  00CD  2891               	goto	l847
   484  00CE  120A  118A  280C   	ljmp	start
   485  00D1                     __end_of_main:
   486                           
   487                           	psect	text1
   488  0159                     __ptext1:	
   489 ;; *************** function _Servo_Init *****************
   490 ;; Defined at:
   491 ;;		line 7 in file "servo.c"
   492 ;; Parameters:    Size  Location     Type
   493 ;;		None
   494 ;; Auto vars:     Size  Location     Type
   495 ;;		None
   496 ;; Return value:  Size  Location     Type
   497 ;;                  1    wreg      void 
   498 ;; Registers used:
   499 ;;		wreg
   500 ;; Tracked objects:
   501 ;;		On entry : 0/0
   502 ;;		On exit  : 0/0
   503 ;;		Unchanged: 0/0
   504 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   505 ;;      Params:         0       0       0       0       0
   506 ;;      Locals:         0       0       0       0       0
   507 ;;      Temps:          0       0       0       0       0
   508 ;;      Totals:         0       0       0       0       0
   509 ;;Total ram usage:        0 bytes
   510 ;; Hardware stack levels used: 1
   511 ;; Hardware stack levels required when called: 1
   512 ;; This function calls:
   513 ;;		Nothing
   514 ;; This function is called by:
   515 ;;		_main
   516 ;; This function uses a non-reentrant model
   517 ;;
   518                           
   519  0159                     _Servo_Init:	
   520                           ;psect for function _Servo_Init
   521                           
   522  0159                     l695:	
   523                           ;incstack = 0
   524                           ; Regs used in _Servo_Init: [wreg]
   525                           
   526                           
   527                           ;servo.c: 15:     PORTDbits.RD1 = 0;
   528  0159  1283               	bcf	3,5	;RP0=0, select bank0
   529  015A  1303               	bcf	3,6	;RP1=0, select bank0
   530  015B  1088               	bcf	8,1	;volatile
   531                           
   532                           ;servo.c: 16:     PORTDbits.RD1 = 0;
   533  015C  1088               	bcf	8,1	;volatile
   534                           
   535                           ;servo.c: 49:     INTCONbits.GIE = 1;
   536  015D  178B               	bsf	11,7	;volatile
   537                           
   538                           ;servo.c: 50:     INTCONbits.TMR0IE = 1;
   539  015E  168B               	bsf	11,5	;volatile
   540                           
   541                           ;servo.c: 51:     INTCONbits.TMR0IF = 0;
   542  015F  110B               	bcf	11,2	;volatile
   543  0160                     l697:
   544                           
   545                           ;servo.c: 52:     T1CON = 0x50;
   546  0160  3050               	movlw	80
   547  0161  0090               	movwf	16	;volatile
   548  0162                     l699:
   549                           
   550                           ;servo.c: 53:     T1CONbits.TMR1ON = 1;
   551  0162  1410               	bsf	16,0	;volatile
   552                           
   553                           ;servo.c: 54:     TMR0 = 50;
   554  0163  3032               	movlw	50
   555  0164  0081               	movwf	1	;volatile
   556  0165                     l17:
   557  0165  0008               	return
   558  0166                     __end_of_Servo_Init:
   559                           
   560                           	psect	text2
   561  012F                     __ptext2:	
   562 ;; *************** function _Servo_2_Write *****************
   563 ;; Defined at:
   564 ;;		line 65 in file "servo.c"
   565 ;; Parameters:    Size  Location     Type
   566 ;;  ang             1    wreg     unsigned char 
   567 ;; Auto vars:     Size  Location     Type
   568 ;;  ang             1   14[BANK0 ] unsigned char 
   569 ;; Return value:  Size  Location     Type
   570 ;;                  1    wreg      void 
   571 ;; Registers used:
   572 ;;		wreg, status,2, status,0, pclath, cstack
   573 ;; Tracked objects:
   574 ;;		On entry : 0/0
   575 ;;		On exit  : 0/0
   576 ;;		Unchanged: 0/0
   577 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   578 ;;      Params:         0       0       0       0       0
   579 ;;      Locals:         0       1       0       0       0
   580 ;;      Temps:          0       3       0       0       0
   581 ;;      Totals:         0       4       0       0       0
   582 ;;Total ram usage:        4 bytes
   583 ;; Hardware stack levels used: 1
   584 ;; Hardware stack levels required when called: 2
   585 ;; This function calls:
   586 ;;		___awdiv
   587 ;;		___wmul
   588 ;; This function is called by:
   589 ;;		_main
   590 ;; This function uses a non-reentrant model
   591 ;;
   592                           
   593  012F                     _Servo_2_Write:	
   594                           ;psect for function _Servo_2_Write
   595                           
   596                           
   597                           ;incstack = 0
   598                           ; Regs used in _Servo_2_Write: [wreg+status,2+status,0+pclath+cstack]
   599                           ;Servo_2_Write@ang stored from wreg
   600  012F  1283               	bcf	3,5	;RP0=0, select bank0
   601  0130  1303               	bcf	3,6	;RP1=0, select bank0
   602  0131  00AE               	movwf	Servo_2_Write@ang
   603  0132                     l841:
   604                           
   605                           ;servo.c: 65: void Servo_2_Write(unsigned char ang);servo.c: 66: {;servo.c: 67:     data
      +                          _s[1] = (ang-0)*(60 -14)/(180-0)+14;
   606  0132  30B4               	movlw	180
   607  0133  00A2               	movwf	___awdiv@divisor
   608  0134  3000               	movlw	0
   609  0135  00A3               	movwf	___awdiv@divisor+1
   610  0136  082E               	movf	Servo_2_Write@ang,w
   611  0137  00AB               	movwf	??_Servo_2_Write
   612  0138  01AC               	clrf	??_Servo_2_Write+1
   613  0139  082B               	movf	??_Servo_2_Write,w
   614  013A  00F4               	movwf	___wmul@multiplier
   615  013B  082C               	movf	??_Servo_2_Write+1,w
   616  013C  00F5               	movwf	___wmul@multiplier+1
   617  013D  302E               	movlw	46
   618  013E  00F6               	movwf	___wmul@multiplicand
   619  013F  3000               	movlw	0
   620  0140  00F7               	movwf	___wmul@multiplicand+1
   621  0141  120A  118A  2104  120A  118A  	fcall	___wmul
   622  0146  0875               	movf	?___wmul+1,w
   623  0147  1283               	bcf	3,5	;RP0=0, select bank0
   624  0148  1303               	bcf	3,6	;RP1=0, select bank0
   625  0149  00A5               	movwf	___awdiv@dividend+1
   626  014A  0874               	movf	?___wmul,w
   627  014B  00A4               	movwf	___awdiv@dividend
   628  014C  120A  118A  201F  120A  118A  	fcall	___awdiv
   629  0151  1283               	bcf	3,5	;RP0=0, select bank0
   630  0152  1303               	bcf	3,6	;RP1=0, select bank0
   631  0153  0822               	movf	?___awdiv,w
   632  0154  3E0E               	addlw	14
   633  0155  00AD               	movwf	??_Servo_2_Write+2
   634  0156  082D               	movf	??_Servo_2_Write+2,w
   635  0157  00B3               	movwf	_data_s+1
   636  0158                     l20:
   637  0158  0008               	return
   638  0159                     __end_of_Servo_2_Write:
   639                           
   640                           	psect	text3
   641  0104                     __ptext3:	
   642 ;; *************** function ___wmul *****************
   643 ;; Defined at:
   644 ;;		line 15 in file "C:\Program Files\Microchip\xc8\v2.36\pic\sources\c90\common\Umul16.c"
   645 ;; Parameters:    Size  Location     Type
   646 ;;  multiplier      2    4[COMMON] unsigned int 
   647 ;;  multiplicand    2    6[COMMON] unsigned int 
   648 ;; Auto vars:     Size  Location     Type
   649 ;;  product         2    0[BANK0 ] unsigned int 
   650 ;; Return value:  Size  Location     Type
   651 ;;                  2    4[COMMON] unsigned int 
   652 ;; Registers used:
   653 ;;		wreg, status,2, status,0
   654 ;; Tracked objects:
   655 ;;		On entry : 0/0
   656 ;;		On exit  : 0/0
   657 ;;		Unchanged: 0/0
   658 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   659 ;;      Params:         4       0       0       0       0
   660 ;;      Locals:         0       2       0       0       0
   661 ;;      Temps:          0       0       0       0       0
   662 ;;      Totals:         4       2       0       0       0
   663 ;;Total ram usage:        6 bytes
   664 ;; Hardware stack levels used: 1
   665 ;; Hardware stack levels required when called: 1
   666 ;; This function calls:
   667 ;;		Nothing
   668 ;; This function is called by:
   669 ;;		_Servo_2_Write
   670 ;; This function uses a non-reentrant model
   671 ;;
   672                           
   673  0104                     ___wmul:	
   674                           ;psect for function ___wmul
   675                           
   676  0104                     l827:	
   677                           ;incstack = 0
   678                           ; Regs used in ___wmul: [wreg+status,2+status,0]
   679                           
   680  0104  1283               	bcf	3,5	;RP0=0, select bank0
   681  0105  1303               	bcf	3,6	;RP1=0, select bank0
   682  0106  01A0               	clrf	___wmul@product
   683  0107  01A1               	clrf	___wmul@product+1
   684  0108                     l829:
   685  0108  1C74               	btfss	___wmul@multiplier,0
   686  0109  290B               	goto	u351
   687  010A  290C               	goto	u350
   688  010B                     u351:
   689  010B  2914               	goto	l131
   690  010C                     u350:
   691  010C                     l831:
   692  010C  0876               	movf	___wmul@multiplicand,w
   693  010D  1283               	bcf	3,5	;RP0=0, select bank0
   694  010E  1303               	bcf	3,6	;RP1=0, select bank0
   695  010F  07A0               	addwf	___wmul@product,f
   696  0110  1803               	skipnc
   697  0111  0AA1               	incf	___wmul@product+1,f
   698  0112  0877               	movf	___wmul@multiplicand+1,w
   699  0113  07A1               	addwf	___wmul@product+1,f
   700  0114                     l131:
   701  0114  3001               	movlw	1
   702  0115                     u365:
   703  0115  1003               	clrc
   704  0116  0DF6               	rlf	___wmul@multiplicand,f
   705  0117  0DF7               	rlf	___wmul@multiplicand+1,f
   706  0118  3EFF               	addlw	-1
   707  0119  1D03               	skipz
   708  011A  2915               	goto	u365
   709  011B                     l833:
   710  011B  3001               	movlw	1
   711  011C                     u375:
   712  011C  1003               	clrc
   713  011D  0CF5               	rrf	___wmul@multiplier+1,f
   714  011E  0CF4               	rrf	___wmul@multiplier,f
   715  011F  3EFF               	addlw	-1
   716  0120  1D03               	skipz
   717  0121  291C               	goto	u375
   718  0122                     l835:
   719  0122  0874               	movf	___wmul@multiplier,w
   720  0123  0475               	iorwf	___wmul@multiplier+1,w
   721  0124  1D03               	btfss	3,2
   722  0125  2927               	goto	u381
   723  0126  2928               	goto	u380
   724  0127                     u381:
   725  0127  2908               	goto	l829
   726  0128                     u380:
   727  0128                     l837:
   728  0128  1283               	bcf	3,5	;RP0=0, select bank0
   729  0129  1303               	bcf	3,6	;RP1=0, select bank0
   730  012A  0821               	movf	___wmul@product+1,w
   731  012B  00F5               	movwf	?___wmul+1
   732  012C  0820               	movf	___wmul@product,w
   733  012D  00F4               	movwf	?___wmul
   734  012E                     l133:
   735  012E  0008               	return
   736  012F                     __end_of___wmul:
   737                           
   738                           	psect	text4
   739  001F                     __ptext4:	
   740 ;; *************** function ___awdiv *****************
   741 ;; Defined at:
   742 ;;		line 5 in file "C:\Program Files\Microchip\xc8\v2.36\pic\sources\c90\common\awdiv.c"
   743 ;; Parameters:    Size  Location     Type
   744 ;;  divisor         2    2[BANK0 ] int 
   745 ;;  dividend        2    4[BANK0 ] int 
   746 ;; Auto vars:     Size  Location     Type
   747 ;;  quotient        2    9[BANK0 ] int 
   748 ;;  sign            1    8[BANK0 ] unsigned char 
   749 ;;  counter         1    7[BANK0 ] unsigned char 
   750 ;; Return value:  Size  Location     Type
   751 ;;                  2    2[BANK0 ] int 
   752 ;; Registers used:
   753 ;;		wreg, status,2, status,0
   754 ;; Tracked objects:
   755 ;;		On entry : 0/0
   756 ;;		On exit  : 0/0
   757 ;;		Unchanged: 0/0
   758 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   759 ;;      Params:         0       4       0       0       0
   760 ;;      Locals:         0       4       0       0       0
   761 ;;      Temps:          0       1       0       0       0
   762 ;;      Totals:         0       9       0       0       0
   763 ;;Total ram usage:        9 bytes
   764 ;; Hardware stack levels used: 1
   765 ;; Hardware stack levels required when called: 1
   766 ;; This function calls:
   767 ;;		Nothing
   768 ;; This function is called by:
   769 ;;		_Servo_2_Write
   770 ;; This function uses a non-reentrant model
   771 ;;
   772                           
   773  001F                     ___awdiv:	
   774                           ;psect for function ___awdiv
   775                           
   776  001F                     l749:	
   777                           ;incstack = 0
   778                           ; Regs used in ___awdiv: [wreg+status,2+status,0]
   779                           
   780  001F  1283               	bcf	3,5	;RP0=0, select bank0
   781  0020  1303               	bcf	3,6	;RP1=0, select bank0
   782  0021  01A8               	clrf	___awdiv@sign
   783  0022                     l751:
   784  0022  1FA3               	btfss	___awdiv@divisor+1,7
   785  0023  2825               	goto	u221
   786  0024  2826               	goto	u220
   787  0025                     u221:
   788  0025  282D               	goto	l757
   789  0026                     u220:
   790  0026                     l753:
   791  0026  09A2               	comf	___awdiv@divisor,f
   792  0027  09A3               	comf	___awdiv@divisor+1,f
   793  0028  0AA2               	incf	___awdiv@divisor,f
   794  0029  1903               	skipnz
   795  002A  0AA3               	incf	___awdiv@divisor+1,f
   796  002B                     l755:
   797  002B  01A8               	clrf	___awdiv@sign
   798  002C  0AA8               	incf	___awdiv@sign,f
   799  002D                     l757:
   800  002D  1FA5               	btfss	___awdiv@dividend+1,7
   801  002E  2830               	goto	u231
   802  002F  2831               	goto	u230
   803  0030                     u231:
   804  0030  283A               	goto	l763
   805  0031                     u230:
   806  0031                     l759:
   807  0031  09A4               	comf	___awdiv@dividend,f
   808  0032  09A5               	comf	___awdiv@dividend+1,f
   809  0033  0AA4               	incf	___awdiv@dividend,f
   810  0034  1903               	skipnz
   811  0035  0AA5               	incf	___awdiv@dividend+1,f
   812  0036                     l761:
   813  0036  3001               	movlw	1
   814  0037  00A6               	movwf	??___awdiv
   815  0038  0826               	movf	??___awdiv,w
   816  0039  06A8               	xorwf	___awdiv@sign,f
   817  003A                     l763:
   818  003A  01A9               	clrf	___awdiv@quotient
   819  003B  01AA               	clrf	___awdiv@quotient+1
   820  003C                     l765:
   821  003C  0822               	movf	___awdiv@divisor,w
   822  003D  0423               	iorwf	___awdiv@divisor+1,w
   823  003E  1903               	btfsc	3,2
   824  003F  2841               	goto	u241
   825  0040  2842               	goto	u240
   826  0041                     u241:
   827  0041  2879               	goto	l785
   828  0042                     u240:
   829  0042                     l767:
   830  0042  01A7               	clrf	___awdiv@counter
   831  0043  0AA7               	incf	___awdiv@counter,f
   832  0044  2850               	goto	l773
   833  0045                     l769:
   834  0045  3001               	movlw	1
   835  0046                     u255:
   836  0046  1003               	clrc
   837  0047  0DA2               	rlf	___awdiv@divisor,f
   838  0048  0DA3               	rlf	___awdiv@divisor+1,f
   839  0049  3EFF               	addlw	-1
   840  004A  1D03               	skipz
   841  004B  2846               	goto	u255
   842  004C                     l771:
   843  004C  3001               	movlw	1
   844  004D  00A6               	movwf	??___awdiv
   845  004E  0826               	movf	??___awdiv,w
   846  004F  07A7               	addwf	___awdiv@counter,f
   847  0050                     l773:
   848  0050  1FA3               	btfss	___awdiv@divisor+1,7
   849  0051  2853               	goto	u261
   850  0052  2854               	goto	u260
   851  0053                     u261:
   852  0053  2845               	goto	l769
   853  0054                     u260:
   854  0054                     l775:
   855  0054  3001               	movlw	1
   856  0055                     u275:
   857  0055  1003               	clrc
   858  0056  0DA9               	rlf	___awdiv@quotient,f
   859  0057  0DAA               	rlf	___awdiv@quotient+1,f
   860  0058  3EFF               	addlw	-1
   861  0059  1D03               	skipz
   862  005A  2855               	goto	u275
   863  005B  0823               	movf	___awdiv@divisor+1,w
   864  005C  0225               	subwf	___awdiv@dividend+1,w
   865  005D  1D03               	skipz
   866  005E  2861               	goto	u285
   867  005F  0822               	movf	___awdiv@divisor,w
   868  0060  0224               	subwf	___awdiv@dividend,w
   869  0061                     u285:
   870  0061  1C03               	skipc
   871  0062  2864               	goto	u281
   872  0063  2865               	goto	u280
   873  0064                     u281:
   874  0064  286C               	goto	l781
   875  0065                     u280:
   876  0065                     l777:
   877  0065  0822               	movf	___awdiv@divisor,w
   878  0066  02A4               	subwf	___awdiv@dividend,f
   879  0067  0823               	movf	___awdiv@divisor+1,w
   880  0068  1C03               	skipc
   881  0069  03A5               	decf	___awdiv@dividend+1,f
   882  006A  02A5               	subwf	___awdiv@dividend+1,f
   883  006B                     l779:
   884  006B  1429               	bsf	___awdiv@quotient,0
   885  006C                     l781:
   886  006C  3001               	movlw	1
   887  006D                     u295:
   888  006D  1003               	clrc
   889  006E  0CA3               	rrf	___awdiv@divisor+1,f
   890  006F  0CA2               	rrf	___awdiv@divisor,f
   891  0070  3EFF               	addlw	-1
   892  0071  1D03               	skipz
   893  0072  286D               	goto	u295
   894  0073                     l783:
   895  0073  3001               	movlw	1
   896  0074  02A7               	subwf	___awdiv@counter,f
   897  0075  1D03               	btfss	3,2
   898  0076  2878               	goto	u301
   899  0077  2879               	goto	u300
   900  0078                     u301:
   901  0078  2854               	goto	l775
   902  0079                     u300:
   903  0079                     l785:
   904  0079  0828               	movf	___awdiv@sign,w
   905  007A  1903               	btfsc	3,2
   906  007B  287D               	goto	u311
   907  007C  287E               	goto	u310
   908  007D                     u311:
   909  007D  2883               	goto	l789
   910  007E                     u310:
   911  007E                     l787:
   912  007E  09A9               	comf	___awdiv@quotient,f
   913  007F  09AA               	comf	___awdiv@quotient+1,f
   914  0080  0AA9               	incf	___awdiv@quotient,f
   915  0081  1903               	skipnz
   916  0082  0AAA               	incf	___awdiv@quotient+1,f
   917  0083                     l789:
   918  0083  082A               	movf	___awdiv@quotient+1,w
   919  0084  00A3               	movwf	?___awdiv+1
   920  0085  0829               	movf	___awdiv@quotient,w
   921  0086  00A2               	movwf	?___awdiv
   922  0087                     l284:
   923  0087  0008               	return
   924  0088                     __end_of___awdiv:
   925                           
   926                           	psect	text5
   927  00D1                     __ptext5:	
   928 ;; *************** function _TMR0_ISR *****************
   929 ;; Defined at:
   930 ;;		line 114 in file "servo.c"
   931 ;; Parameters:    Size  Location     Type
   932 ;;		None
   933 ;; Auto vars:     Size  Location     Type
   934 ;;		None
   935 ;; Return value:  Size  Location     Type
   936 ;;                  1    wreg      void 
   937 ;; Registers used:
   938 ;;		wreg, status,2, status,0
   939 ;; Tracked objects:
   940 ;;		On entry : 0/0
   941 ;;		On exit  : 0/0
   942 ;;		Unchanged: 0/0
   943 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   944 ;;      Params:         0       0       0       0       0
   945 ;;      Locals:         0       0       0       0       0
   946 ;;      Temps:          4       0       0       0       0
   947 ;;      Totals:         4       0       0       0       0
   948 ;;Total ram usage:        4 bytes
   949 ;; Hardware stack levels used: 1
   950 ;; This function calls:
   951 ;;		Nothing
   952 ;; This function is called by:
   953 ;;		Interrupt level 1
   954 ;; This function uses a non-reentrant model
   955 ;;
   956                           
   957  00D1                     _TMR0_ISR:	
   958                           ;psect for function _TMR0_ISR
   959                           
   960  00D1                     i1l795:
   961                           
   962                           ;servo.c: 116:     if(INTCONbits.TMR0IF == 1)
   963  00D1  1D0B               	btfss	11,2	;volatile
   964  00D2  28D4               	goto	u32_21
   965  00D3  28D5               	goto	u32_20
   966  00D4                     u32_21:
   967  00D4  28FD               	goto	i1l29
   968  00D5                     u32_20:
   969  00D5                     i1l797:
   970                           
   971                           ;servo.c: 117:     {;servo.c: 118:         cont_sr = cont_sr + 1;
   972  00D5  0878               	movf	_cont_sr,w
   973  00D6  3E01               	addlw	1
   974  00D7  00F8               	movwf	_cont_sr
   975  00D8  0879               	movf	_cont_sr+1,w
   976  00D9  1803               	skipnc
   977  00DA  3E01               	addlw	1
   978  00DB  3E00               	addlw	0
   979  00DC  00F9               	movwf	_cont_sr+1
   980  00DD                     i1l799:
   981                           
   982                           ;servo.c: 119:         if(cont_sr > 490){
   983  00DD  3001               	movlw	1
   984  00DE  0279               	subwf	_cont_sr+1,w
   985  00DF  30EB               	movlw	235
   986  00E0  1903               	skipnz
   987  00E1  0278               	subwf	_cont_sr,w
   988  00E2  1C03               	skipc
   989  00E3  28E5               	goto	u33_21
   990  00E4  28E6               	goto	u33_20
   991  00E5                     u33_21:
   992  00E5  28E8               	goto	i1l803
   993  00E6                     u33_20:
   994  00E6                     i1l801:
   995                           
   996                           ;servo.c: 120:             cont_sr = 0;
   997  00E6  01F8               	clrf	_cont_sr
   998  00E7  01F9               	clrf	_cont_sr+1
   999  00E8                     i1l803:
  1000                           
  1001                           ;servo.c: 127:         if(cont_sr < data_s[1]){PORTDbits.RD1 = 1;} else{PORTDbits.RD1 = 
      +                          0;}
  1002  00E8  1283               	bcf	3,5	;RP0=0, select bank0
  1003  00E9  1303               	bcf	3,6	;RP1=0, select bank0
  1004  00EA  0833               	movf	_data_s+1,w
  1005  00EB  00F0               	movwf	??_TMR0_ISR
  1006  00EC  01F1               	clrf	??_TMR0_ISR+1
  1007  00ED  0871               	movf	??_TMR0_ISR+1,w
  1008  00EE  0279               	subwf	_cont_sr+1,w
  1009  00EF  1D03               	skipz
  1010  00F0  28F3               	goto	u34_25
  1011  00F1  0870               	movf	??_TMR0_ISR,w
  1012  00F2  0278               	subwf	_cont_sr,w
  1013  00F3                     u34_25:
  1014  00F3  1803               	skipnc
  1015  00F4  28F6               	goto	u34_21
  1016  00F5  28F7               	goto	u34_20
  1017  00F6                     u34_21:
  1018  00F6  28F9               	goto	i1l27
  1019  00F7                     u34_20:
  1020  00F7                     i1l805:
  1021  00F7  1488               	bsf	8,1	;volatile
  1022  00F8  28FA               	goto	i1l807
  1023  00F9                     i1l27:
  1024  00F9  1088               	bcf	8,1	;volatile
  1025  00FA                     i1l807:
  1026                           
  1027                           ;servo.c: 154:         TMR0 = 50;
  1028  00FA  3032               	movlw	50
  1029  00FB  0081               	movwf	1	;volatile
  1030  00FC                     i1l809:
  1031                           
  1032                           ;servo.c: 155:         INTCONbits.TMR0IF = 0;
  1033  00FC  110B               	bcf	11,2	;volatile
  1034  00FD                     i1l29:
  1035  00FD  0873               	movf	??_TMR0_ISR+3,w
  1036  00FE  008A               	movwf	10
  1037  00FF  0E72               	swapf	??_TMR0_ISR+2,w
  1038  0100  0083               	movwf	3
  1039  0101  0EFE               	swapf	btemp,f
  1040  0102  0E7E               	swapf	btemp,w
  1041  0103  0009               	retfie
  1042  0104                     __end_of_TMR0_ISR:
  1043  007E                     btemp	set	126	;btemp
  1044  007E                     wtemp0	set	126
  1045                           
  1046                           	psect	intentry
  1047  0004                     __pintentry:	
  1048                           ;incstack = 0
  1049                           ; Regs used in _TMR0_ISR: [wreg+status,2+status,0]
  1050                           
  1051  0004                     interrupt_function:
  1052  007E                     saved_w	set	btemp
  1053  0004  00FE               	movwf	btemp
  1054  0005  0E03               	swapf	3,w
  1055  0006  00F2               	movwf	??_TMR0_ISR+2
  1056  0007  080A               	movf	10,w
  1057  0008  00F3               	movwf	??_TMR0_ISR+3
  1058  0009  120A  118A  28D1   	ljmp	_TMR0_ISR
  1059                           
  1060                           	psect	idloc
  1061                           
  1062                           ;Config register IDLOC0 @ 0x2000
  1063                           ;	unspecified, using default values
  1064  2000                     	org	8192
  1065  2000  3FFF               	dw	16383
  1066                           
  1067                           ;Config register IDLOC1 @ 0x2001
  1068                           ;	unspecified, using default values
  1069  2001                     	org	8193
  1070  2001  3FFF               	dw	16383
  1071                           
  1072                           ;Config register IDLOC2 @ 0x2002
  1073                           ;	unspecified, using default values
  1074  2002                     	org	8194
  1075  2002  3FFF               	dw	16383
  1076                           
  1077                           ;Config register IDLOC3 @ 0x2003
  1078                           ;	unspecified, using default values
  1079  2003                     	org	8195
  1080  2003  3FFF               	dw	16383
  1081                           
  1082                           	psect	config
  1083                           
  1084                           ;Config register CONFIG @ 0x2007
  1085                           ;	Oscillator Selection bits
  1086                           ;	FOSC = XT, XT oscillator
  1087                           ;	Watchdog Timer Enable bit
  1088                           ;	WDTE = OFF, WDT disabled
  1089                           ;	Power-up Timer Enable bit
  1090                           ;	PWRTE = OFF, PWRT disabled
  1091                           ;	Brown-out Reset Enable bit
  1092                           ;	BOREN = OFF, BOR disabled
  1093                           ;	Low-Voltage (Single-Supply) In-Circuit Serial Programming Enable bit
  1094                           ;	LVP = OFF, RB3 is digital I/O, HV on MCLR must be used for programming
  1095                           ;	Data EEPROM Memory Code Protection bit
  1096                           ;	CPD = OFF, Data EEPROM code protection off
  1097                           ;	Flash Program Memory Write Enable bits
  1098                           ;	WRT = OFF, Write protection off; all program memory may be written to by EECON control
  1099                           ;	In-Circuit Debugger Mode bit
  1100                           ;	DEBUG = 0x1, unprogrammed default
  1101                           ;	Flash Program Memory Code Protection bit
  1102                           ;	CP = OFF, Code protection off
  1103  2007                     	org	8199
  1104  2007  3F39               	dw	16185

Data Sizes:
    Strings     0
    Constant    0
    Data        0
    BSS         10
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14      8      10
    BANK0            80     18      26
    BANK1            80      0       0
    BANK3            96      0       0
    BANK2            96      0       0

Pointer List with Targets:

    None.

Critical Paths under _main in COMMON

    _Servo_2_Write->___wmul
    ___awdiv->___wmul

Critical Paths under _TMR0_ISR in COMMON

    None.

Critical Paths under _main in BANK0

    _main->_Servo_2_Write
    _Servo_2_Write->___awdiv
    ___awdiv->___wmul

Critical Paths under _TMR0_ISR in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _TMR0_ISR in BANK1

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _TMR0_ISR in BANK3

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _TMR0_ISR in BANK2

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 3     3      0     799
                                             15 BANK0      3     3      0
                      _Servo_2_Write
                         _Servo_Init
 ---------------------------------------------------------------------------------
 (1) _Servo_Init                                           0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _Servo_2_Write                                        4     4      0     799
                                             11 BANK0      4     4      0
                            ___awdiv
                             ___wmul
 ---------------------------------------------------------------------------------
 (2) ___wmul                                               6     2      4     316
                                              4 COMMON     4     0      4
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (2) ___awdiv                                              9     5      4     452
                                              2 BANK0      9     5      4
                             ___wmul (ARG)
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 2
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (3) _TMR0_ISR                                             4     4      0       0
                                              0 COMMON     4     4      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 3
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _Servo_2_Write
     ___awdiv
       ___wmul (ARG)
     ___wmul
   _Servo_Init

 _TMR0_ISR (ROOT)

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BITCOMMON            E      0       0       0        0.0%
EEDATA             100      0       0       0        0.0%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
COMMON               E      8       A       1       71.4%
BITSFR0              0      0       0       1        0.0%
SFR0                 0      0       0       1        0.0%
BITSFR1              0      0       0       2        0.0%
SFR1                 0      0       0       2        0.0%
STACK                0      0       0       2        0.0%
ABS                  0      0      24       3        0.0%
BITBANK0            50      0       0       4        0.0%
BITSFR3              0      0       0       4        0.0%
SFR3                 0      0       0       4        0.0%
BANK0               50     12      1A       5       32.5%
BITSFR2              0      0       0       5        0.0%
SFR2                 0      0       0       5        0.0%
BITBANK1            50      0       0       6        0.0%
BANK1               50      0       0       7        0.0%
BITBANK3            60      0       0       8        0.0%
BANK3               60      0       0       9        0.0%
BITBANK2            60      0       0      10        0.0%
BANK2               60      0       0      11        0.0%
DATA                 0      0      24      12        0.0%


Microchip Technology PIC Macro Assembler V2.36 build 20220127204148 
Symbol Table                                                                                   Tue May 24 00:06:37 2022

                     l20 0158                       l17 0165             ___awdiv@sign 0028  
    ___wmul@multiplicand 0076                      l131 0114                      l133 012E  
                    l284 0087                      l751 0022                      l831 010C  
                    l761 0036                      l753 0026                      l833 011B  
                    l841 0132                      l771 004C                      l763 003A  
                    l755 002B                      l835 0122                      l827 0104  
                    l851 00A5                      l843 0088                      l781 006C  
                    l773 0050                      l765 003C                      l757 002D  
                    l749 001F                      l837 0128                      l829 0108  
                    l853 00AB                      l845 008C                      l783 0073  
                    l775 0054                      l767 0042                      l759 0031  
                    l695 0159                      l855 00B9                      l847 0091  
                    l777 0065                      l769 0045                      l785 0079  
                    l697 0160                      l857 00BF                      l849 0097  
                    l787 007E                      l779 006B                      l699 0162  
                    l789 0083                      u300 0079                      u220 0026  
                    u301 0078                      u221 0025                      u310 007E  
                    u230 0031                      u311 007D                      u231 0030  
                    u240 0042                      u241 0041                      u260 0054  
                    u261 0053                      u350 010C                      u255 0046  
                    u351 010B                      u407 00B3                      u280 0065  
                    u281 0064                      u417 00C7                      u275 0055  
                    u380 0128                      u285 0061                      u381 0127  
                    u365 0115                      u295 006D                      u375 011C  
                    u397 009F                     i1l27 00F9                     i1l29 00FD  
                   _TMR0 0001                     _main 0088                     btemp 007E  
                   start 000C                    ?_main 0070          __end_of___awdiv 0088  
        ___awdiv@divisor 0022                    _T1CON 0010                    i1l801 00E6  
                  i1l803 00E8                    i1l805 00F7                    i1l807 00FA  
                  i1l809 00FC                    i1l795 00D1                    i1l797 00D5  
                  i1l799 00DD          ___awdiv@counter 0027                    u32_20 00D5  
                  u32_21 00D4                    u33_20 00E6                    u33_21 00E5  
                  u34_20 00F7                    u34_21 00F6                    u34_25 00F3  
       __end_of_TMR0_ISR 0104                    pclath 000A                    status 0003  
                  wtemp0 007E          __initialization 000F             __end_of_main 00D1  
                 ??_main 002F         ___awdiv@dividend 0024    __end_of_Servo_2_Write 0159  
                 ___wmul 0104                ??___awdiv 0026                   _data_s 0032  
             _Servo_Init 0159         ___awdiv@quotient 0029                   saved_w 007E  
__end_of__initialization 001B           __pcstackCOMMON 0070                ?_TMR0_ISR 0070  
             __pbssBANK0 0032               __pmaintext 0088                  ?___wmul 0074  
             ??_TMR0_ISR 0070               __pintentry 0004              ?_Servo_Init 0070  
                ___awdiv 001F                  __ptext1 0159                  __ptext2 012F  
                __ptext3 0104                  __ptext4 001F                  __ptext5 00D1  
                _cont_sr 0078                _T1CONbits 0010     end_of_initialization 001B  
              _PORTDbits 0008           __end_of___wmul 012F      start_initialization 000F  
               ??___wmul 0078             ??_Servo_Init 0074              __pbssCOMMON 0078  
              ___latbits 0002            __pcstackBANK0 0020       __end_of_Servo_Init 0166  
          _Servo_2_Write 012F                 ?___awdiv 0022         Servo_2_Write@ang 002E  
      interrupt_function 0004           ___wmul@product 0020           ?_Servo_2_Write 0070  
               _TMR0_ISR 00D1               _ADCON1bits 009F        ___wmul@multiplier 0074  
        ??_Servo_2_Write 002B               _INTCONbits 000B                 intlevel1 0000  
